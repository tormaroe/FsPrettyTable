{"name":"Fsprettytable","tagline":"Represent tabular data in visually appealing ASCII tables using F#","body":"FsPrettyTable is a simple F# library designed to make it quick and easy to represent tabular data in visually appealing ASCII tables, like this:\r\n\r\n    +----------+-----------------+-------------+---------------+\r\n    | Language | Developer       | Appeared in | Influenced by |\r\n    +----------+-----------------+-------------+---------------+\r\n    | IPL      | RAND Corp.      |    1956     |               |\r\n    | LISP     | John McCarthy   |    1958     |           IPL |\r\n    | ISWIM    | Peter J. Landin |    1966     |          LISP |\r\n    | ML       | Robin Milner    |    1973     |         ISWIM |\r\n    | Caml     | Gérard Huet     |    1985     |            ML |\r\n    | OCaml    | INRIA           |    1996     |          Caml |\r\n    | F#       | M$ / Don Syme   |    2005     |         OCaml |\r\n    +----------+-----------------+-------------+---------------+\r\n\r\nIt is more or less a rip off of the [PrettyTable Python library](https://code.google.com/p/prettytable/) made by [Luke Maurits](http://www.luke.maurits.id.au/). I hope he doesn't mind.\r\n\r\nPrettyTable lets you control many aspects of the table, like the width of the column padding, the alignment of text within columns, which characters are used to draw the table border, whether you even want a border, and much more. You can control which subsets of the columns and rows are printed, and you can sort the rows by the value of a particular column.\r\n\r\n## Installation\r\n\r\nInstall FsPrettyTable using nuget:\r\n\r\n    PM> Install-Package FsPrettyTable\r\n\r\n## Usage\r\n\r\nLet's begin by defining some data which we would like to display as a table:\r\n\r\n    open PrettyTable\r\n    let headers = [\"Language\";\"Developer\";\"Appeared in\";\"Influenced by\"]\r\n    let rows = [[\"IPL\";\"RAND Corp.\";\"1956\";\"\"]\r\n                [\"LISP\";\"John McCarthy\";\"1958\";\"IPL\"]\r\n                [\"ISWIM\";\"Peter J. Landin\";\"1966\";\"LISP\"]\r\n                [\"ML\";\"Robin Milner\";\"1973\";\"ISWIM\"]\r\n                [\"Caml\";\"Gérard Huet\";\"1985\";\"ML\"]\r\n                [\"OCaml\";\"INRIA\";\"1996\";\"Caml\"]\r\n                [\"F#\";\"M$ / Don Syme\";\"2005\";\"OCaml\"]]\r\n\r\nThe `PrettyTable` module provides a bunch of functions which can be chained together to format, manimulate and finally print (or just return as a string). Let's just print it using the default style first:\r\n\r\n    rows |> prettyTable |> printTable\r\n\r\n    // Output:\r\n    +-------+-----------------+------+-------+\r\n    |  IPL  |   RAND Corp.    | 1956 |       |\r\n    | LISP  |  John McCarthy  | 1958 |  IPL  |\r\n    | ISWIM | Peter J. Landin | 1966 | LISP  |\r\n    |  ML   |  Robin Milner   | 1973 | ISWIM |\r\n    | Caml  |   Gérard Huet   | 1985 |  ML   |\r\n    | OCaml |      INRIA      | 1996 | Caml  |\r\n    |  F#   |  M$ / Don Syme  | 2005 | OCaml |\r\n    +-------+-----------------+------+-------+\r\n\r\nOk, nice. But where did the headers go? Well, you I need to add then obviously:\r\n\r\n    prettyTable rows\r\n    |> withHeaders headers\r\n    |> printTable\r\n\r\n    // Output:\r\n    +----------+-----------------+-------------+---------------+\r\n    | Language |    Developer    | Appeared in | Influenced by |\r\n    +----------+-----------------+-------------+---------------+\r\n    |   IPL    |   RAND Corp.    |    1956     |               |\r\n    |   LISP   |  John McCarthy  |    1958     |      IPL      |\r\n    |  ISWIM   | Peter J. Landin |    1966     |     LISP      |\r\n    |    ML    |  Robin Milner   |    1973     |     ISWIM     |\r\n    |   Caml   |   Gérard Huet   |    1985     |      ML       |\r\n    |  OCaml   |      INRIA      |    1996     |     Caml      |\r\n    |    F#    |  M$ / Don Syme  |    2005     |     OCaml     |\r\n    +----------+-----------------+-------------+---------------+\r\n\r\nIf you just want the table string representation instead of printing it, use `sprintTable`.\r\n\r\n## Changing the ASCII properties\r\n\r\n### Horizontal and vertical rules\r\n\r\nYou can turn both horizontal and vertical rules on or off individually. Let's try it:\r\n\r\n    prettyTable rows\r\n    |> withHeaders headers\r\n    |> verticalRules FsPrettyTable.Types.NoRules\r\n    |> printTable\r\n\r\n    // Output:\r\n    ------------------------------------------------------------\r\n      Language      Developer      Appeared in   Influenced by  \r\n    ------------------------------------------------------------\r\n        IPL        RAND Corp.         1956                      \r\n        LISP      John McCarthy       1958            IPL       \r\n       ISWIM     Peter J. Landin      1966           LISP       \r\n         ML       Robin Milner        1973           ISWIM      \r\n        Caml       Gérard Huet        1985            ML        \r\n       OCaml          INRIA           1996           Caml       \r\n         F#       M$ / Don Syme       2005           OCaml      \r\n    ------------------------------------------------------------\r\n\r\nThat's pretty nice! And the other one:\r\n\r\n    prettyTable rows\r\n    |> withHeaders headers\r\n    |> horizontalRules FsPrettyTable.Types.NoRules\r\n    |> printTable\r\n\r\n    // Output:\r\n    | Language |    Developer    | Appeared in | Influenced by |\r\n    |   IPL    |   RAND Corp.    |    1956     |               |\r\n    |   LISP   |  John McCarthy  |    1958     |      IPL      |\r\n    |  ISWIM   | Peter J. Landin |    1966     |     LISP      |\r\n    |    ML    |  Robin Milner   |    1973     |     ISWIM     |\r\n    |   Caml   |   Gérard Huet   |    1985     |      ML       |\r\n    |  OCaml   |      INRIA      |    1996     |     Caml      |\r\n    |    F#    |  M$ / Don Syme  |    2005     |     OCaml     |\r\n\r\n*TODO: Implement difference between `FsPrettyTable.Types.Frame` and `FsPrettyTable.Types.All`.*\r\n\r\nWhat you might actually be looking for is turning all bordering off, and that can be done using `hasBorder` like so:\r\n\r\n    prettyTable rows\r\n    |> withHeaders headers\r\n    |> hasBorder false\r\n    |> printTable\r\n\r\n    // Output:\r\n     Language     Developer     Appeared in  Influenced by \r\n       IPL       RAND Corp.        1956                    \r\n       LISP     John McCarthy      1958           IPL      \r\n      ISWIM    Peter J. Landin     1966          LISP      \r\n        ML      Robin Milner       1973          ISWIM     \r\n       Caml      Gérard Huet       1985           ML       \r\n      OCaml         INRIA          1996          Caml      \r\n        F#      M$ / Don Syme      2005          OCaml     \r\n\r\n### Horizontal alignment\r\n\r\nYou may align the content of table cells either `Left`, `Right`, og `Center` (default).\r\n\r\n    prettyTable rows\r\n    |> withHeaders headers\r\n    |> horizontalAlignment FsPrettyTable.Types.Left\r\n    |> printTable\r\n\r\n    // Output:\r\n    +----------+-----------------+-------------+---------------+\r\n    | Language | Developer       | Appeared in | Influenced by |\r\n    +----------+-----------------+-------------+---------------+\r\n    | IPL      | RAND Corp.      | 1956        |               |\r\n    | LISP     | John McCarthy   | 1958        | IPL           |\r\n    | ISWIM    | Peter J. Landin | 1966        | LISP          |\r\n    | ML       | Robin Milner    | 1973        | ISWIM         |\r\n    | Caml     | Gérard Huet     | 1985        | ML            |\r\n    | OCaml    | INRIA           | 1996        | Caml          |\r\n    | F#       | M$ / Don Syme   | 2005        | OCaml         |\r\n    +----------+-----------------+-------------+---------------+\r\n\r\nAnd then you have the option to override alignment for each column, based on the heading value:\r\n\r\n    open FsPrettyTable.Types\r\n\r\n    prettyTable rows\r\n    |> withHeaders headers\r\n    |> horizontalAlignment Left\r\n    |> horizontalAlignmentForColumn \"Appeared in\" Center\r\n    |> horizontalAlignmentForColumn \"Influenced by\" Right\r\n    |> printTable\r\n\r\n    // Output:\r\n    +----------+-----------------+-------------+---------------+\r\n    | Language | Developer       | Appeared in | Influenced by |\r\n    +----------+-----------------+-------------+---------------+\r\n    | IPL      | RAND Corp.      |    1956     |               |\r\n    | LISP     | John McCarthy   |    1958     |           IPL |\r\n    | ISWIM    | Peter J. Landin |    1966     |          LISP |\r\n    | ML       | Robin Milner    |    1973     |         ISWIM |\r\n    | Caml     | Gérard Huet     |    1985     |            ML |\r\n    | OCaml    | INRIA           |    1996     |          Caml |\r\n    | F#       | M$ / Don Syme   |    2005     |         OCaml |\r\n    +----------+-----------------+-------------+---------------+\r\n\r\n### Vertical alignment\r\n\r\n*TODO: Implement vertical alignment*\r\n\r\n### Padding\r\n\r\nYou may specify the amount of padding using the `paddingWidth` function. Default padding is `1`, which adds a single space on either side of the value in a cell. You may also specify padding for the *left* and *right* side separately: \r\n\r\n    prettyTable rows\r\n    |> withHeaders headers\r\n    |> hasBorder false\r\n    |> horizontalAlignment Left\r\n    |> horizontalAlignmentForColumn \"Appeared in\" Center\r\n    |> leftPaddingWidth 0\r\n    |> rightPaddingWidth 4\r\n    |> printTable\r\n\r\n    // Output:\r\n    Language    Developer          Appeared in    Influenced by    \r\n    IPL         RAND Corp.            1956                         \r\n    LISP        John McCarthy         1958        IPL              \r\n    ISWIM       Peter J. Landin       1966        LISP             \r\n    ML          Robin Milner          1973        ISWIM            \r\n    Caml        Gérard Huet           1985        ML               \r\n    OCaml       INRIA                 1996        Caml             \r\n    F#          M$ / Don Syme         2005        OCaml                       \r\n\r\n### Header style\r\n\r\nThe casing style of the headers may be changed using the `headerStyle` function. Possible values are:\r\n\r\n Value      | Description\r\n:---------- |:------------\r\n KeepAsIs   | Simply leave it as it is. This is default.\r\n LowerCase  | Turn all letters to lower case.\r\n UpperCase  | Turn all letters to upper case.\r\n TitleCase  | An attempt at producing a linguistically correct title case (for English titles). Uses it's own implementation, which is slightly more correct that the default .NET implementation.\r\n Capitalise | Simple use upper case for the first letter, lower case for the rest.\r\n\r\n    prettyTable rows\r\n    |> withHeaders headers\r\n    |> headerStyle FsPrettyTable.Types.UpperCase\r\n    |> printTable\r\n\r\n    // Output:\r\n    +----------+-----------------+-------------+---------------+\r\n    | LANGUAGE |    DEVELOPER    | APPEARED IN | INFLUENCED BY |\r\n    +----------+-----------------+-------------+---------------+\r\n    |   IPL    |   RAND Corp.    |    1956     |               |\r\n    |   LISP   |  John McCarthy  |    1958     |      IPL      |\r\n    ...\r\n\r\n\r\n### Swapping out the separator characters\r\n\r\nYou can replace the characters used in the border:\r\n\r\n    prettyTable rows\r\n    |> withHeaders headers\r\n    |> verticalChar '/'\r\n    |> horizontalChar ' '\r\n    |> junctionChar 'o'\r\n    |> printTable\r\n\r\n    // Output:\r\n    o          o                 o             o               o\r\n    / Language /    Developer    / Appeared in / Influenced by /\r\n    o          o                 o             o               o\r\n    /   IPL    /   RAND Corp.    /    1956     /               /\r\n    /   LISP   /  John McCarthy  /    1958     /      IPL      /\r\n    /  ISWIM   / Peter J. Landin /    1966     /     LISP      /\r\n    /    ML    /  Robin Milner   /    1973     /     ISWIM     /\r\n    /   Caml   /   Gérard Huet   /    1985     /      ML       /\r\n    /  OCaml   /      INRIA      /    1996     /     Caml      /\r\n    /    F#    /  M$ / Don Syme  /    2005     /     OCaml     /\r\n    o          o                 o             o               o\r\n\r\n### Predefined styles\r\n\r\nFsPrettyTable comes with some predefined style sets. They are:\r\n\r\n Style          | Description |\r\n:-------------- |:-----------\r\n DefaultStyle   | By default, FsPrettyTable produces ASCII tables that look like the ones used in SQL database shells. Use this to undo any style changes you may have made.\r\n PlainColumns   | A borderless style that works well with command line programs for columnar data.\r\n MsWordFriendly | A format which works nicely with Microsoft Word's \"Convert to table\" feature\r\n PlainRows      | Basically just no vertical rules. I think this looks nice :)\r\n Markdown       | *Not supported yet..*\r\n\r\nThis is how you set a style:\r\n\r\n    prettyTable rows\r\n    |> withHeaders headers\r\n    |> setStyle MsWordFriendly\r\n    |> printTable\r\n\r\n## Filtering columns\r\n\r\nYou may filter column output based on the column headers. This requires that you are actually using headers.\r\n\r\n    prettyTable rows\r\n    |> withHeaders headers\r\n    |> onlyColumns [\"Language\"; \"Appeared in\"]\r\n    |> printTable\r\n\r\n    // Output:\r\n    +----------+-------------+\r\n    | Language | Appeared in |\r\n    +----------+-------------+\r\n    |   IPL    |    1956     |\r\n    |   LISP   |    1958     |\r\n    ...\r\n\r\nYou may also specify filtering by column index. This is what you'll have to use if you have a table with no headers:\r\n\r\n    myTable |> onlyColumnsByIndex [0; 2]\r\n\r\nor by a predicate function which will be passed both the column index and the header value as arguments:\r\n\r\n    myTable |> onlyColumnsByChoice\r\n                   (fun i h -> i = 0 || h = \"Appeared in\")\r\n\r\nSpecifying a column filtering overwrites any previous filtering. To remove the filter, use function `allColumns`.\r\n\r\n## Sorting\r\n\r\nYou may sort the table on a single column, again by specifying the header value. Use `sortBy` for ascending order or `sortByDescending` for descending order. Use `sortByNone` to clear any sorting you have previously added.\r\n\r\n    prettyTable rows\r\n    |> withHeaders headers\r\n    |> sortByDescending \"Appeared in\"\r\n    |> printTable\r\n\r\n    // Output:\r\n    +----------+-----------------+-------------+---------------+\r\n    | Language |    Developer    | Appeared in | Influenced by |\r\n    +----------+-----------------+-------------+---------------+\r\n    |    F#    |  M$ / Don Syme  |    2005     |     OCaml     |\r\n    |  OCaml   |      INRIA      |    1996     |     Caml      |\r\n    |   Caml   |   Gérard Huet   |    1985     |      ML       |\r\n    |    ML    |  Robin Milner   |    1973     |     ISWIM     |\r\n    |  ISWIM   | Peter J. Landin |    1966     |     LISP      |\r\n    |   LISP   |  John McCarthy  |    1958     |      IPL      |\r\n    |   IPL    |   RAND Corp.    |    1956     |               |\r\n    +----------+-----------------+-------------+---------------+\r\n\r\nRemember that all values are strings, and will be sorted as such.\r\n\r\n*TODO: Specify column using index*\r\n\r\n*TODO: Specify column using a compare function (takes complete row)*\r\n\r\n## API\r\n\r\nPre version 1.0 the API may change.\r\n\r\n*TODO: Add info about validation*\r\n\r\n### Module PrettyTable\r\n\r\n    val prettyTable : string list list -> Table\r\n    val withHeaders : string list -> Table -> Table\r\n\r\n    val sprintTable : Table -> string\r\n    val printTable : Table -> unit\r\n\r\n    val hasHeader : bool -> Table -> Table\r\n    val hasBorder : bool -> Table -> Table\r\n    val verticalRules : Rules -> Table -> Table\r\n    val horizontalRules : Rules -> Table -> Table\r\n\r\n    val headerStyle : HeaderStyle -> Table -> Table\r\n\r\n    val horizontalAlignment : HorizontalAlignment -> Table -> Table\r\n    val horizontalAlignmentForColumn : string -> HorizontalAlignment -> Table -> Table\r\n\r\n    val paddingWidth : int -> Table -> Table\r\n    val leftPaddingWidth : int -> Table -> Table\r\n    val rightPaddingWidth : int -> Table -> Table\r\n\r\n    val verticalChar : char -> Table -> Table\r\n    val horizontalChar : char -> Table -> Table\r\n    val junctionChar : char -> Table -> Table\r\n\r\n    val onlyColumns : string list -> Table -> Table\r\n    val onlyColumnsByIndex : int list -> Table -> Table\r\n    val onlyColumnsByChoice : (int -> string -> bool) -> Table -> Table\r\n    val allColumns : Table -> Table\r\n\r\n    val sortBy : string -> Table -> Table\r\n    val sortByDescending : string -> Table -> Table\r\n    val sortByNone Table -> Table\r\n\r\n    type Style = DefaultStyle | PlainColumns | PlainRows | MsWordFriendly\r\n    val setStyle : Style -> Table -> Table\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Torbjørn Marø\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}